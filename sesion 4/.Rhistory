# Definir el directorio de trabajo.
citation()
demo("colors","grDevices")
#===============================================================================
# R trabaja con los siguientes operadores lÃ³gicos: menor o
# DIRECTORIO DE TRABAJO.
#===============================================================================
getwd()
# Ejercicio: Realizar algunas operaciones matemÃ¡ticas.
3+sqrt(2)
# DIRECTORIO DE TRABAJO.
#===============================================================================
getwd()
setwd("C:/Users/destok/Curso R")
3+sqrt(2)
roudnt(0.23-exp(5),2)
round(0.23-exp(5),2)
getwd()
getwd()
trunc(5*1/7)
abs(-25)/6
125%%6
125%%6
125%%6
125%%6
125%/%6
2==3
exp(3)!=abs(3)
2==3
a <-2
b <- sqrt(0.25)
c <- runif(1,0,5) #1 numero aleatorio 2, limite inf, limite sup
name <- "Felipe"; name
x <- TRUE;X
a <-2
b <- sqrt(0.25)
c <- runif(1,0,5) #1 numero aleatorio 2, limite inf, limite sup
name <- "Felipe"; name
x <- TRUE;x
c <- runif(1,0,5) #1 numero aleatorio 2, limite inf, limite sup
c <- runif(1,0,5) #1 numero aleatorio 2, limite inf, limite sup
c <- runif(1,0,5)
c <- runif(1,0,5)
c <- runif(1,0,5); c
name <- "Felipe"; name
a<- b+c; a
f <- round((b+c)/a,3);F
f <- round((b+c)/a,3);f
f <- round((b+exp(c))/a,3);f
f <- round((b+exp(c))/a,3);f
f <- round((b+exp(c))/a,3);f
f <- round((2*b+exp(c))/a,3);f
f <- round((2*b+exp(c))/a,3);f
ls(pat = "a")
class(a)
class(name)
class(x)
rm(list = ls())
v_num = c(1,2,7,4,5,11)
v_en = c(1L,3L,5L)
v_num = c(1,2,7,4,5,11)
class(v_en)
#Crear un vector entero.
v_en = c(1L,3L,5L)
class(v_en)
#Crear un vector lógico
v_car = c("tito","valentina")
class(v_car)
v_log = c(T,F,T,F,T)
class(v_log)
is.character(v_num)
is.integer(v_en)
x1[3]
x1[c(3,5)]
x1 = c(12,13,14,15,16,11,12,13,14)
x1[3]
x1[c(3,5)]
x[x1>13]
x1[x1>13]
x1 != 12
x1[x1 != 12]
x2 = seq(1:10)
x3 = seq(1,25, by=3)
x3
x4 = rep(1,5)
x4
x5 = rep(c(1,6),6)
x5
x5 = rep(c(1,2),6)
x5
x6 = c(2,3,4,NA,NA,11)
is.na(6)
is.na(6)
is.na(x6)
x6[!is.na(x6)]
[!is.na(x6)]
!is.na(x6)
x7 = factor(c("O","O","B","AB","B","A","AB"))
class(x7)
lavels (x7)
levels (x7)
summary (x7)
summary (x5)
summary (x1)
levels(x1)
A = matrix(1:6);
A = matrix(1:6);A
B = matrix(1:6,nrow=2);B
B = matrix(1:6,nrow=3);B
C = matrix(1:6,nrow=2,byrow=T);C
A[0,0]
A[0;0]
A[1,1]
A[1,5]
A[2,3]
C[2,3]
C[,1]
C = matrix(1:6,nrow=2,byrow=T);C
C[,1]
C[1,]
rowname(C) = c("s1","s2")
colname(C) = c("v1","v2","v3")
source('C:/Users/felipe/Desktop/Curso R/Sesion2_Estudiante.R', encoding = 'UTF-8', echo=TRUE)
rownames(C) = c("s1","s2")
colnames(C) = c("v1","v2","v3")
rm(list = ls()) # limpiar valiables
A = matrix(1:6);A
B = matrix(1:6,nrow=2);B
C = matrix(1:6,nrow=2,byrow=T);C
#Ejercicio: Extaer elementos de una matriz
C[2,3]
C[,1]
C[1,]
rownames(C) = c("s1","s2")
colnames(C) = c("v1","v2","v3")
C
dim(C)
colnames(C)
rownames(C)
mode(C)
length(C)
is.matrix(C)
write.table(Base,file="Base2.txt")
Base
Base <- data.frame(Edad,Num_her,Names,Estrato,Semestre)
write.table(Base,file="Base2.txt")
Edad <- c(NA,17,18,18,21)
Num_her <- c(1,2,3,3,4)
Names <- c("E1","E2","E3","E4","E5")
Estrato <- c(2,3,4,3,5)
Estrato <- as.factor(Estrato)
Semestre <- factor(c(2,3,4,4,7))
class(Edad)
class(Num_her)
class(Names)
class(Estrato)
class(Semestre)
Base <- data.frame(Edad,Num_her,Names,Estrato,Semestre)
write.table(Base,file="Base2.txt")
Write_dta(data = Base,path = "Base3.dta" )
write_dta(data = Base,path = "Base3.dta" )
Datos5 = read_dta("binary.dta")
library(haven)
write_dta(data = Base,path = "Base3.dta" )
install.packages("eurostat")
T1 = search_eurostat("employment", type = "all")
library("eurostat")
T1 = search_eurostat("employment", type = "all")
T1
T1
T1$code[291]
T1$code[333]
T1[333]
T1[333,]
BaseEurostat = "cult_emp_sex"
label_eurostat_tables(Bases Eurostat)
label_eurostat_tables(BasesEurostat)
label_eurostat_tables(BaseEurostat)
DataEuro = get_eurostat(BaseEurostat,time_format = "raw",keepFlags = F)
DataEuro
DataEuro = label_eurostat(DataEuro)
DataEuro
DataEuro$geo
install.packages("tidyverse")
library(tidyverse)
data_1 <- data.frame(Year = c(2014,2015,2016),
Pedro = c(100,500,200),
Carla = c(400,600,250),
Maria = c(200,700,900))
data_1
data_3 <- data.frame(names = c("Pedro", "Carla", "Maria", "Pedro", "Carla", "Maria", "Pedro", "Carla", "Maria"),
year = c("2014", "2014", "2014",  "2015", "2015", "2015",  "2016", "2016", "2016"),
salario = c(100, 400, 200, 500, 600, 700, 200, 250,900) )
data_3
data_2 <- data.frame(names = c("Pedro", "Carla", "Maria"),
W_2014 = c(100, 400, 200),
W_2015 = c(500, 600, 700),
W_2016 = c(200, 250, 900) )
data_2
data_long = data_wide %>% gather(periodo, salario,2:4)
data_wide = data_2
data_long = data_wide %>% gather(periodo, salario,2:4)
data_long
#Â¿Como quitar el W?
?mutate #adjunta nuevas variables y preserva existentes
?gsub #coincidencia de patrones y reemplazo.
library(dplyr)
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long
library(magrittr) # para la opcion operador "%>%"
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long = data_wide %>% gather(periodo, salario,2:4)
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long = data_wide %>% gather(periodo,salario,2:4)
data_long
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long = data_long %>% mutate(periodo-gsub("w_","",periodo))
library(dplyr) #funcion mutate
library(magrittr) # para la opcion operador "%>%"
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
str(data_long)
data_long
rm(list=ls())
getwd()
# Definir directorio de trabajo.
#===============================================================================
# LIIMPIEZA O PREPROCESADO DE DATOS - PARTE 1
#===============================================================================
#Es dificil que en una aplicacion real tengamos los datos tal y como
#los necesitamos para hacer el analisis. Habitualmente tendremos que
#trabajar los datos para arreglarlos.
#El procesado o limpieza de los datos suele ocupar entre 70-80%
#del tiempo de un analisis de datos.
#===============================================================================
#===============================================================================
# TIDYVERSE
#===============================================================================
# Ejercicio: Consultar en R Â¿Que es tidyverse?
??tidyverse
# Simplificar cÃ³digo y acelerar el procesamiento
# Con la palabra tidyverse se hace referencia a una nueva forma de
# afrontar el analisis de datos en R. Se hace uso de un grupo de
# paquetes que trabajan en armonia porque comparten ciertos principios,
# como por ejemplo, la forma de estructurar los datos.
# Permite que los scripts deben ser "facilmente" legibles por las
# personas.
# Sirve para resolver problemas complejos encadenando funciones simples con el
# operador %>% (pipeline). Lo que hace este operador es pasar el elemento que
# esta a su izquierda como un argumento de la funcion que tiene a
# la derecha.
#Los principales packages del tidyverse son:
#readr: para importar datos
#tidyr: para convertir los datos a tidy data
#dplyr: para manipular datos
#ggplot2: para hacer graficos
#purrr: para functional programming
#Finalmente estos pkgs se han agrupado en un solo package,
#el tidyverse package.
# Ejercicio: Cargar la libreria tidyverse
library(tidyverse)
#---------------------------------------------------------------------
#---------------------------------------------------------------------
# --------------- Las funciones gather() y spread()
#Ejercicio: Â¿Que son datos tidy?
#Una base de datos tidy es una base de datos en la cual:
# Cada variable que se medida debe estar en una columna.
# Cada observaciÃ³n distinta de esa variable debe estar en una fila diferente.
# En general, la forma en que representariamos una base de datos tidy en R es usando un data frame.
data_1 <- data.frame(Year = c(2014,2015,2016),
Pedro = c(100,500,200),
Carla = c(400,600,250),
Maria = c(200,700,900))
data_1
#No son datos tidy
data_2 <- data.frame(names = c("Pedro", "Carla", "Maria"),
W_2014 = c(100, 400, 200),
W_2015 = c(500, 600, 700),
W_2016 = c(200, 250, 900) )
data_2
#Si son tidy - formato ancho (wide)
data_3 <- data.frame(names = c("Pedro", "Carla", "Maria", "Pedro", "Carla", "Maria", "Pedro", "Carla", "Maria"),
year = c("2014", "2014", "2014",  "2015", "2015", "2015",  "2016", "2016", "2016"),
salario = c(100, 400, 200, 500, 600, 700, 200, 250,900) )
data_3
# Si son datos tidy y me permiten sacar mas provecho del tidyverse
# Datos en formato: long format. Es un formato es mas eficiente para
# los computadores.
# Ejercicio: Â¿Como puedo pasar de un formato a otro?
# Funciones gather() y spread()
# Pasar de wide a long format gather()
data_wide = data_2
# Utilizaremos el operador para encadenar los pasos
# La indicacion es que tome los nombres de las columnas
# y los ubique en una sola columna y cada uno lo repita
# tantas veces como individuos tenga, eso lo guardar en una
# en una columna que se llama periodo.
# Luego tomar las observaciones para cada individuo y la colocar en una columna
# que se llama salario.
data_long = data_wide %>% gather(periodo,salario,2:4)
data_long
#Â¿Como quitar el W?
?mutate #adjunta nuevas variables y preserva existentes
?gsub #coincidencia de patrones y reemplazo.
library(dplyr) #funcion mutate
library(magrittr) # para la opcion operador "%>%"
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
data_long = data_long %>% mutate(periodo-gsub("W_","",periodo))
library(readxl)
Indice <- read_excel("C:/Users/felipe/Desktop/Curso R/sesion 4/Indice.xlsx")
View(Indice)
setwd("C:/Users/felipe/Desktop/Curso R/sesion 4")
View(Indice)
View(Indice)
dim(Indice)
str(Indice)
Indice
Indice_long = Indice %>% gather(año,Indice,2:7)
Indice_long
Indice_long = Indice_long %>% mutate(P.relativo= gsub("Puntos","%",P.relativo))
Indice_long = Indice_long %>% mutate(P.Relativo= gsub("Puntos","%",P.Relativo))
Indice_long
Indice_long = Indice_long %>% mutate(P.Relativo= gsub("Puntos","%",P.Relativo), Año = gsub("P","",Año))
data_long <- data_long %>% mutate(periodo=gsub("W_","",periodo))
data_long
Indice_long
Indice_long = Indice_long %>% mutate(P.Relativo= gsub("Puntos","%",P.Relativo), año = gsub("P","",Año))
Indice_long <- Indice_long %>% mutate(P.Relativo= gsub("Puntos","%",P.Relativo),
Año = gsub("P","",Año))
Indice
dim(Indice)
str(Indice)
Indice_long <- Indice %>% gather(Año,Indice,2:7)
Indice_long
Indice_long <- Indice_long %>% mutate(P.Relativo= gsub("Puntos","%",P.Relativo),
Año = gsub("P","",Año))
Indice_long
data_4 <- data.frame( Nombres = c("Carlos_Guzman", "Diana_Salazar", "Pedro_Vega"),
Semestre  = c("I", "II", "I") )
data_4
data_4 = data_4 %>% separate(Nombres, c("Nombre","Apellido"),sep="_")
data_4
data_4 <- data.frame( Nombres = c("Carlos_Guzman", "Diana_Salazar", "Pedro_Vega"),
Semestre  = c("I", "II", "I") )
data_4
data_4a = data_4 %>% separate(Nombres, c("Nombre","Apellido"),sep="_")
data_4a
data_4b = data_4a %>% unite(Nombre_y_Apellido,1:2,sep = "")
data_4b
